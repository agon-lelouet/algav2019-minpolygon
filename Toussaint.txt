
Le fonctionnement de l'algorithme de Toussaint, à implémenter :

Cet algorithme se base sur l'algorithme qui permet d'obtenir l'enveloppe convexe minimale d'un nuage de points (on en a vu plusieurs en cours, je te conseille le Graham, qui est le meilleur).

On suppose donc qu'on a un nuage de points, et on suppose qu'on en connaît l'enveloppe convexe minimale, soit une liste de points qui forment l'enveloppe en un sens déterminé à garder le même.

On doit trouver les 4 points de l'enveloppe convexe (on sait que l'enveloppe convexe a au moins 4 points sur des nuages non-triviaux) respectivement d'abscisse minimum, maximum, d'ordonnées minimum et maximum. (O^n)

Construire 4 droites :
- La parallèle à la droite des abscisses qui passe par le point d'abscisse minimum
- La parallèle à la droite des abscisses qui passe par le point d'abscisse maximum
- La parallèle à la droite des ordonnées qui passe par le point d'ordonnées minimum
- La parallèle à la droite des ordonnées qui passe par le point d'ordonnées maximum

(temps constant)

Pour chacunes des quatre droites nouvellement créées, calculer l'angle avec le côté correspondant de l'enveloppe convexe.

(tu calcules donc 4 angles)

Tu prends le minimum de ces quatre angles.

Tu appliques une rotation de cet angle aux quatre droites.

Tu créés le rectangle formé par l'intersection des quatre droites : ce rectangle contient tous les points du nuage.

Tu calcules l'aire du rectangle et tu la gardes.

Après la rotation, tu calcules les nouveaux angles entre les droites mises à jour et le côté correspondant, et tu recommences sur le nouveau minimum.

Par une propriété mathématique connue du cours, le rectangle d'enveloppe a un côté commun avec l'enveloppe convexe. Donc, pour t'arrêter, tu dois avoir un angle minimum entre ta droite et le côté de l'enveloppe convexe correspondant égal à 0 (dans les faits, quand ça devient très très petit, tu t'arrêtes).

Quand tu l'as trouvé, ce rectangle contient bien tous les points, et c'est bien le rectangle minimum.

Je suis sûr qu'il y a plein de bibliothèques en Java qui permettent de faire tout ça.

Tu dois arriver à représenter une droite.
A calculer l'aire du rectangle.
A effectuer une rotation de droite.

J'essaierai d'implémenter un truc en C à l'occasion, je devrais avoir un peu plus de mal à trouver des bibliothèques pour le calcul vectoriel.

Une excellente ressource sur Internet d'où vient tout ce que je te dis, faite par quelqu'un qui a eu le même devoir que nous il y a quatre ans de ça (un ancien du master STL donc).

https://vincentcordobes.github.io/ritter-toussaint/

J'ai à peu près compris tout ce qu'il raconte, j'ai essayé de clarifier ce qui ne l'était pas assez, je peux donc répondre à toutes les questions que tu aurais.

